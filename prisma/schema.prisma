generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgres"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

// #region NextAuth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    headId String?
    head   Head?   @relation(fields: [headId], references: [id])

    Contact        Contact?
    createdInvites HeadInvite[] @relation("creator")
    usedInvite     HeadInvite[] @relation("user")
    feedback       Feedback[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([headId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// #endregion

// #region Application
model Head {
    id    String  @id @default(cuid())
    name  String
    info  String?
    image String?

    activities Activity[]
    companies  Company[]
    contacts   Contact[]
    projects   Project[]
    user       User[]
    invites    HeadInvite[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model HeadInvite {
    id     String @id @unique @default(cuid())
    headId String
    head   Head   @relation(fields: [headId], references: [id], onDelete: Cascade)

    creatorId String?
    creator   User?   @relation("creator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    userId String?
    user   User?     @relation("user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    usedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([headId])
    @@index([creatorId])
    @@index([userId])
}

model Contact {
    id     String @id @default(cuid())
    headId String
    head   Head   @relation(fields: [headId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    userId String? @unique
    user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    name   String
    email  String?
    image  String?
    info   String?
    mobile String?

    activities Activity[]
    companies  Company[]
    projects   Project[]

    outgoingRelations ContactRelation[] @relation("outgoingContact")
    incomingRelations ContactRelation[] @relation("incomingContact")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([headId])
}

model ContactRelation {
    outgoingContactId String
    outgoingContact   Contact @relation("outgoingContact", fields: [outgoingContactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    incomingContactId String
    incomingContact   Contact @relation("incomingContact", fields: [incomingContactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([outgoingContactId, incomingContactId])
    @@index([outgoingContactId])
    @@index([incomingContactId])
}

model Company {
    id     String @id @default(cuid())
    headId String
    head   Head   @relation(fields: [headId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    name  String
    image String?
    info  String?
    field String?

    activities Activity[]
    contacts   Contact[]
    projects   Project[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([headId])
}

enum ProjectStatus {
    NotStarted
    OnHold
    InProgress
    Completed
    Cancelled
}

model Project {
    id     String @id @default(cuid())
    headId String
    head   Head   @relation(fields: [headId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    name   String
    image  String?
    info   String?
    status ProjectStatus @default(NotStarted)
    date   DateTime      @default(now())

    activities Activity[]
    companies  Company[]
    contacts   Contact[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([headId])
}

enum ActivityType {
    Call
    Meeting
    Email
    FollowUp
    Task
}

model Activity {
    id          String       @id @default(cuid())
    headId      String
    head        Head         @relation(fields: [headId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    description String?
    type        ActivityType @default(Call)
    date        DateTime     @default(now())

    companies Company[]
    contacts  Contact[]
    projects  Project[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([headId])
}

// #endregion

// #region Additional

model Feedback {
    id String @id @default(cuid())

    userId String?
    user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    message String
    rating  Int     @default(0)
    page    String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

// #endregion
