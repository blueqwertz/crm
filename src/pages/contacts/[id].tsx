import Head from "next/head";
import { api } from "~/utils/api";
import { Breadcrumbs } from "~/components/breadcrumbs";
import type { GetStaticProps, NextPage } from "next";
import { Skeleton } from "~/components/ui/skeleton";
import { ContactIndividualPage } from "~/components/individual-page/contact-individual-page";
import { Layout } from "~/components/layout";
import { Avatar, AvatarFallback, AvatarImage } from "~/components/ui/avatar";
import initials from "initials";
import { EditContact } from "~/components/individual-page/edit-button/edit-contact";
import { CanDoOperation } from "~/utils/policyQuery";
import { useSearchParams } from "next/navigation";
import { useSession } from "next-auth/react";

const ContactPage: NextPage<{ id: string }> = ({ id }) => {
  const { data: contact, isLoading } = api.contact.get.useQuery({
    id,
    include: {
      activities: true,
      companies: true,
      projects: true,
      relations: true,
      policies: true,
    },
  });

  const { data: session } = useSession();

  if (isLoading) {
    console.log("is loading!!!");
  }

  return (
    <>
      <Head>
        <title>CRM / Contacts </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-grow flex-col p-5">
          {/* HEADER */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Avatar className="h-12 w-12 text-lg">
                <AvatarImage
                  src={contact?.image ?? contact?.user?.image ?? ""}
                  alt=""
                />
                <AvatarFallback>
                  {initials(contact?.name ?? "").toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <div className="flex flex-col">
                {!contact && <Skeleton className="h-7 text-transparent" />}
                {!!contact && (
                  <h1 className="text-xl font-bold">{contact.name}</h1>
                )}
                <span className="text-sm text-muted-foreground">
                  {!!contact?.info?.length ? (
                    contact?.info
                  ) : (
                    <>View contact details.</>
                  )}
                </span>
              </div>
            </div>
            {CanDoOperation({
              session: session,
              entity: "contact",
              operation: "edit",
              policies: contact?.policies,
            }) && <EditContact contact={contact ?? null} />}
          </div>
          <Breadcrumbs lastItem={contact?.name} />
          <ContactIndividualPage contactId={id} contact={contact ?? null} />
        </div>
      </Layout>
    </>
  );
};

export const getStaticProps: GetStaticProps = (context) => {
  const id = context.params?.id;

  if (typeof id != "string") throw new Error("no id provided");

  return {
    props: {
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ContactPage;
