import Head from "next/head";
import { api } from "~/utils/api";
import { Breadcrumbs } from "~/components/breadcrumbs";
import type { GetStaticProps, NextPage } from "next";
import { Skeleton } from "~/components/ui/skeleton";
import { ContactIndividualPage } from "~/components/individual-page/contact-individual-page";
import { Layout } from "~/components/layout";
import { Avatar, AvatarFallback, AvatarImage } from "~/components/ui/avatar";
import initials from "initials";
import { EditContact } from "~/components/individual-page/edit-button/edit-contact";

const ContactPage: NextPage<{ id: string }> = ({ id }) => {
  const { data: contactData, isLoading } = api.contact.get.useQuery({
    id,
    include: {
      activities: true,
      companies: true,
      projects: true,
      relations: true,
    },
  });

  if (isLoading) {
    console.log("is loading!!!");
  }

  return (
    <>
      <Head>
        <title>CRM / Contacts </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-grow flex-col p-5">
          {/* HEADER */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Avatar className="h-12 w-12 text-lg">
                <AvatarImage
                  src={contactData?.image ?? contactData?.user?.image ?? ""}
                  alt=""
                />
                <AvatarFallback>
                  {initials(contactData?.name ?? "").toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <div className="flex flex-col">
                {!contactData && <Skeleton className="h-7 text-transparent" />}
                {!!contactData && (
                  <h1 className="text-xl font-bold">{contactData.name}</h1>
                )}
                <span className="text-sm text-muted-foreground">
                  {!!contactData?.info?.length ? (
                    contactData?.info
                  ) : (
                    <>View contact details.</>
                  )}
                </span>
              </div>
            </div>
            <EditContact contact={contactData ?? null} />
          </div>
          <Breadcrumbs lastItem={contactData?.name} />
          <ContactIndividualPage contactId={id} contact={contactData ?? null} />
        </div>
      </Layout>
    </>
  );
};

// export async function getServerSideProps(
//   context: GetServerSidePropsContext<{ id: string }>
// ) {
//   const helpers = createServerSideHelpers({
//     router: appRouter,
//     ctx: { db, session: await getSession(context), ee: new EventEmitter() },
//     transformer: superjson,
//   });
//   const id = context.params?.id ?? "";
//   /*
//    * Prefetching the `post.byId` query.
//    * `prefetch` does not return the result and never throws - if you need that behavior, use `fetch` instead.
//    */
//   await helpers.contact.get.fetch({
//     id,
//     include: {
//       activities: true,
//       companies: true,
//       projects: true,
//       relations: true,
//     },
//   });
//   // Make sure to return { props: { trpcState: helpers.dehydrate() } }
//   return {
//     props: {
//       trpcState: helpers.dehydrate(),
//       id,
//     },
//   };
// }

export const getStaticProps: GetStaticProps = (context) => {
  const id = context.params?.id;

  if (typeof id != "string") throw new Error("no id provided");

  return {
    props: {
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ContactPage;
