import Head from "next/head";
import { Breadcrumbs } from "~/components/breadcrumbs";
import { AddContact } from "~/components/create/create-contact";
import { Layout } from "~/components/layout";
import { useSession } from "next-auth/react";
import { api } from "~/utils/api";
import {
  Briefcase,
  Calendar,
  History,
  LinkIcon,
  Mail,
  MoreHorizontal,
  Voicemail,
  Loader2,
  MoveHorizontal,
  MoveLeft,
  MoveRight,
  Pencil,
  Trash,
} from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "~/components/ui/avatar";
import { Badge } from "~/components/ui/badge";
import Link from "next/link";
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "~/utils/cn";
import initials from "initials";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Combobox } from "@/components/ui/combobox";
import { Input } from "@/components/ui/input";
import type {
  Activity,
  Company,
  Contact,
  ContactPolicy,
  Project,
} from "@prisma/client";
import { CanDoOperation } from "~/utils/policy";
import { EditContact } from "~/components/edit-button/edit-contact";
import type { ColumnDef } from "@tanstack/react-table";
import { DataTable } from "~/components/ui/data-table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "~/components/ui/dropdown-menu";
import dayjs from "dayjs";
import advancedFormat from "dayjs/plugin/advancedFormat";
dayjs.extend(advancedFormat);
import relativeTime from "dayjs/plugin/relativeTime";
dayjs.extend(relativeTime);

export default function Contacts() {
  const { data: session } = useSession();
  const { data: contacts } = api.contact.getAll.useQuery({
    include: {
      companies: true,
      projects: true,
      lastActivity: true,
    },
  });

  return (
    <>
      <Head>
        <title>CRM / Contacts</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-grow flex-col p-5">
          {/* HEADER */}
          <div className="flex items-center justify-between">
            <div className="flex flex-col">
              <h1 className="text-xl font-bold">Contacts</h1>
              <span className="text-muted-foreground text-sm">
                View all of your contacts.
              </span>
            </div>
            {CanDoOperation({
              session,
              entity: "contact",
              operation: "create",
            }) && <AddContact />}
          </div>
          <Breadcrumbs />
          <div className="mt-3">
            {!contacts && (
              <>
                <div className="divide-border divide-y rounded-md border">
                  <div className="flex items-center gap-2 px-2 py-3 sm:px-4">
                    <Skeleton className="h-8 w-8 rounded-full" />
                    <Skeleton className="h-8 flex-grow rounded-md" />
                  </div>
                  <div className="flex items-center gap-2 px-2 py-3 sm:px-4">
                    <Skeleton className="h-8 w-8 rounded-full" />
                    <Skeleton className="h-8 flex-grow rounded-md" />
                  </div>
                </div>
              </>
            )}
            {!!contacts && (
              <DataTable columns={columns} data={contacts} header={true} />
            )}
          </div>
        </div>
      </Layout>
    </>
  );
}

export const columns: ColumnDef<
  Contact & {
    activities: Activity[];
    companies: Company[];
    projects: Project[];
  }
>[] = [
  {
    accessorKey: "name",
    header: "Name",
    cell: ({ row }) => {
      const contact = row.original;

      return (
        <Link
          href={`/contacts/${row.original.id}`}
          className="flex items-center gap-2"
        >
          <Avatar className="h-8 w-8 text-xs">
            <AvatarImage src={contact.image ?? ""} alt="" />
            <AvatarFallback className="text-xs">
              {initials(contact.name).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <span className="cursor-pointer font-medium">{contact.name}</span>
        </Link>
      );
    },
  },
  {
    header: "Company",
    accessorKey: "companies",
    cell: ({ row }) => {
      const contact = row.original;

      return (
        <div className="flex flex-wrap gap-1">
          {contact.companies?.map((company) => (
            <Badge variant={"outline"}>{company.name}</Badge>
          ))}
        </div>
      );
    },
  },
  {
    header: "Projects",
    accessorKey: "projects",
    cell: ({ row }) => {
      const contact = row.original;

      return (
        <div className="flex flex-wrap gap-1">
          {contact.projects?.map((project) => (
            <Badge variant={"outline"}>{project.name}</Badge>
          ))}
        </div>
      );
    },
  },
  {
    id: "action",
    header: "Last activity",
    cell: ({ row }) => {
      return (
        !!row.original.activities?.[0]?.date && (
          <div className="text-muted-foreground flex items-center gap-1.5">
            <History className="h-4 w-4" />
            <span className="font-light">
              {/* {JSON.stringify(row.original.activities)} */}
              {dayjs().to(row.original.activities?.[0]?.date)}
            </span>
          </div>
        )
      );
    },
  },
  // {
  //   id: "action",
  //   cell: ({ row }) => {
  //     return (
  //       <div className="text-muted-foreground flex items-center gap-1.5">
  //         <Calendar className="w-4 h-4" />
  //         <span className="font-light">
  //           {dayjs().to(row.original.createdAt)}
  //         </span>
  //       </div>
  //     );
  //   },
  // },
  {
    id: "action",
    cell: ({ row }) => {
      // const contact = row.original;
      return (
        <div className="flex justify-end">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button size={"icon"} className="h-7 w-7" variant={"ghost"}>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>Edit</DropdownMenuItem>
              <DropdownMenuItem className="text-red-500">
                Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];
