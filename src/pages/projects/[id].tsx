import Head from "next/head";
import { api } from "~/utils/api";
import { Breadcrumbs } from "~/components/breadcrumbs";
import type { GetStaticProps, NextPage } from "next";
import { Skeleton } from "~/components/ui/skeleton";
import { ProjectIndividualPage } from "~/components/individual-page/project-indiviual-page";
import { Layout } from "~/components/layout";
import { Badge } from "~/components/ui/badge";
import { statusMaps } from "~/utils/maps";
import { EditProject } from "~/components/individual-page/edit-button/edit-project";
import { useState } from "react";
import { Project, ProjectPolicy, ProjectStatus } from "@prisma/client";
import { CanDoOperation } from "~/utils/policyQuery";
import { useSession } from "next-auth/react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
} from "~/components/ui/select";

const ProjectPage: NextPage<{ id: string }> = ({ id }) => {
  const { data: projectData, isLoading } = api.project.get.useQuery({
    id,
    include: {
      activities: true,
      companies: true,
      contacts: true,
      policies: true,
    },
  });

  const { data: sessionData } = useSession();

  if (isLoading) {
    console.log("is loading!!!");
  }

  return (
    <>
      <Head>
        <title>CRM / Projects </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-grow flex-col p-5">
          {/* HEADER */}
          <div className="flex items-center justify-between">
            <div className="flex flex-col">
              <div className="flex items-center gap-2">
                {!projectData && (
                  <>
                    <Skeleton className="h-7 text-transparent w-32" />
                    <Skeleton className="h-6 text-transparent w-24" />
                  </>
                )}
                {!!projectData && (
                  <h1 className="text-xl font-bold">{projectData.name}</h1>
                )}
                {!!projectData?.status && (
                  <ProjectStatusEdit project={projectData} />
                )}
              </div>
              <span className="text-sm text-muted-foreground">
                {!!projectData?.info?.length ? (
                  projectData?.info
                ) : (
                  <>View contact details.</>
                )}
              </span>
            </div>
            {CanDoOperation({
              session: sessionData,
              policies: projectData?.policies,
              entity: "project",
              operation: "edit",
            }) && <EditProject project={projectData ?? null} />}
          </div>
          <Breadcrumbs lastItem={projectData?.name ?? "..."} />
          <ProjectIndividualPage projectId={id} project={projectData ?? null} />
        </div>
      </Layout>
    </>
  );
};

const ProjectStatusEdit = ({
  project,
}: {
  project: Project & { policies: ProjectPolicy[] };
}) => {
  const { data: sessionData } = useSession();

  const ctx = api.useUtils();

  const [statusLoading, setStatusLoading] = useState(false);
  const [status, setStatus] = useState<ProjectStatus>(project.status);

  const { mutate: updateStatus } = api.project.update.useMutation({
    onMutate: () => {
      setStatusLoading(true);
    },
    onSuccess: async () => {
      await ctx.project.getAll.invalidate();
      setStatusLoading(false);
    },
    onError: () => {
      setStatusLoading(false);
    },
  });
  return (
    <>
      {CanDoOperation({
        session: sessionData,
        policies: project.policies,
        entity: "project",
        operation: "edit",
      }) ? (
        <>
          <Select
            disabled={statusLoading}
            defaultValue={status}
            onValueChange={(value: ProjectStatus) => {
              setStatus(value);
              updateStatus({
                id: project.id,
                data: {
                  status: value,
                },
              });
            }}
          >
            <SelectTrigger className="w-auto h-auto inline-flex items-center justify-center gap-x-1 rounded px-1.5 py-[3px] font-medium transition-colors border text-foreground text-xs leading-3 truncate">
              {statusMaps[status].icon}
              {statusMaps[status].title}
            </SelectTrigger>
            <SelectContent>
              {Object.values(ProjectStatus).map((status) => {
                return (
                  <SelectItem key={status} value={status}>
                    {statusMaps[status].title}
                  </SelectItem>
                );
              })}
            </SelectContent>
          </Select>
        </>
      ) : (
        <>
          <Badge variant={"outline"}>
            {statusMaps[project.status].icon}
            {statusMaps[project.status].title}
          </Badge>
        </>
      )}
    </>
  );
};

export const getStaticProps: GetStaticProps = (context) => {
  const id = context.params?.id;

  if (typeof id != "string") throw new Error("no id provided");

  return {
    props: {
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ProjectPage;
