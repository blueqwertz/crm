import Head from "next/head";
import { api } from "~/utils/api";
import { Breadcrumbs } from "~/components/breadcrumbs";
import type { GetStaticProps, NextPage } from "next";
import { Skeleton } from "~/components/ui/skeleton";
import { ProjectIndividualPage } from "~/components/individual-page/project-indiviual-page";
import { Layout } from "~/components/layout";
import { Badge } from "~/components/ui/badge";
import { statusMaps } from "~/utils/maps";
import { EditProject } from "~/components/individual-page/edit-button/edit-project";

const ProjectPage: NextPage<{ id: string }> = ({ id }) => {
  const { data: projectData, isLoading } = api.project.get.useQuery({
    id,
    include: {
      activities: true,
      companies: true,
      contacts: true,
    },
  });

  if (isLoading) {
    console.log("is loading!!!");
  }

  return (
    <>
      <Head>
        <title>CRM / Projects </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-grow flex-col p-5">
          {/* HEADER */}
          <div className="flex items-center justify-between">
            <div className="flex flex-col">
              <div className="flex items-center gap-2">
                {!projectData && <Skeleton className="h-7 text-transparent" />}
                {!!projectData && (
                  <h1 className="text-xl font-bold">{projectData.name}</h1>
                )}
                {!!projectData?.status && (
                  <Badge variant={"outline"}>
                    {statusMaps[projectData?.status].icon}
                    {statusMaps[projectData?.status].title}
                  </Badge>
                )}
              </div>
              <span className="text-sm text-muted-foreground">
                {!!projectData?.info?.length ? (
                  projectData?.info
                ) : (
                  <>View contact details.</>
                )}
              </span>
            </div>

            <EditProject project={projectData ?? null} />
          </div>
          <Breadcrumbs lastItem={projectData?.name ?? "..."} />
          <ProjectIndividualPage projectId={id} project={projectData ?? null} />
        </div>
      </Layout>
    </>
  );
};

// export async function getServerSideProps(
//   context: GetServerSidePropsContext<{ id: string }>
// ) {
//   const helpers = createServerSideHelpers({
//     router: appRouter,
//     ctx: { db, session: await getSession(context), ee: new EventEmitter() },
//     transformer: superjson,
//   });
//   const id = context.params?.id ?? "";
//   /*
//    * Prefetching the `post.byId` query.
//    * `prefetch` does not return the result and never throws - if you need that behavior, use `fetch` instead.
//    */
//   await helpers.project.get.fetch({
//     id,
//     include: {
//       activities: true,
//       companies: true,
//       contacts: true,
//     },
//   });
//   // Make sure to return { props: { trpcState: helpers.dehydrate() } }
//   return {
//     props: {
//       trpcState: helpers.dehydrate(),
//       id,
//     },
//   };
// }

export const getStaticProps: GetStaticProps = (context) => {
  const id = context.params?.id;

  if (typeof id != "string") throw new Error("no id provided");

  return {
    props: {
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ProjectPage;
