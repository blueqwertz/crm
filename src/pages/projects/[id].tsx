import Head from "next/head";
import { api } from "~/utils/api";
import { Breadcrumbs } from "~/components/breadcrumbs";
import type { GetStaticProps, NextPage } from "next";
import { Skeleton } from "~/components/ui/skeleton";
import { Layout } from "~/components/layout";
import { Badge } from "~/components/ui/badge";
import { statusMaps } from "~/utils/maps";
import { EditProject } from "~/components/edit-button/edit-project";
import { useState } from "react";
import { Project, ProjectPolicy, ProjectStatus } from "@prisma/client";
import { CanDoOperation } from "~/utils/policyQuery";
import { useSession } from "next-auth/react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
} from "~/components/ui/select";
import React from "react";
import { RouterOutputs } from "~/utils/api";
import { ActivitiesTable } from "~/components/tables/activities-table";
import { ContactsTable } from "~/components/tables/contacts-table";
import { CompanyTable } from "~/components/tables/company-table";

const ProjectPage: NextPage<{ id: string }> = ({ id }) => {
  const { data: project, isLoading } = api.project.get.useQuery({
    id,
    include: {
      activities: true,
      companies: true,
      contacts: true,
      policies: true,
    },
  });

  if (isLoading) {
    console.log("is loading!!!");
  }

  return (
    <>
      <Head>
        <title>CRM / Projects </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-grow flex-col p-5">
          <ProjectHeader project={project} />
          <Breadcrumbs lastItem={project?.name ?? "..."} />
          <ProjectIndividualPage projectId={id} project={project ?? null} />
        </div>
      </Layout>
    </>
  );
};

const ProjectHeader = ({
  project,
}: {
  project: RouterOutputs["project"]["get"] | undefined;
}) => {
  const { data: session } = useSession();

  return (
    <div className="flex items-center justify-between">
      <div className="flex flex-col">
        <div className="flex items-center gap-2">
          {!project && (
            <>
              <Skeleton className="h-7 text-transparent w-32" />
              <Skeleton className="h-6 text-transparent w-24" />
            </>
          )}
          {!!project && <h1 className="text-xl font-bold">{project.name}</h1>}
          {!!project?.status && <ProjectStatusEdit project={project} />}
        </div>
        <span className="text-sm text-muted-foreground">
          {!!project?.info?.length ? project?.info : <>View contact details.</>}
        </span>
      </div>
      {CanDoOperation({
        session,
        policies: project?.policies,
        entity: "project",
        operation: "edit",
      }) && <EditProject project={project ?? null} />}
    </div>
  );
};

const ProjectStatusEdit = ({
  project,
}: {
  project: Project & { policies: ProjectPolicy[] };
}) => {
  const { data: session } = useSession();

  const ctx = api.useUtils();

  const [statusLoading, setStatusLoading] = useState(false);
  const [status, setStatus] = useState<ProjectStatus>(project.status);

  const { mutate: updateStatus } = api.project.update.useMutation({
    onMutate: () => {
      setStatusLoading(true);
    },
    onSuccess: async () => {
      await ctx.project.getAll.invalidate();
      setStatusLoading(false);
    },
    onError: () => {
      setStatusLoading(false);
    },
  });
  return (
    <>
      {CanDoOperation({
        session,
        policies: project.policies,
        entity: "project",
        operation: "edit",
      }) ? (
        <>
          <Select
            disabled={statusLoading}
            defaultValue={status}
            onValueChange={(value: ProjectStatus) => {
              setStatus(value);
              updateStatus({
                id: project.id,
                data: {
                  status: value,
                },
              });
            }}
          >
            <SelectTrigger className="w-auto h-auto inline-flex items-center justify-center gap-x-1 rounded px-1.5 py-[3px] font-medium transition-colors border text-foreground text-xs leading-3 truncate">
              {statusMaps[status].icon}
              {statusMaps[status].title}
            </SelectTrigger>
            <SelectContent>
              {Object.values(ProjectStatus).map((status) => {
                return (
                  <SelectItem key={status} value={status}>
                    {statusMaps[status].title}
                  </SelectItem>
                );
              })}
            </SelectContent>
          </Select>
        </>
      ) : (
        <>
          <Badge variant={"outline"}>
            {statusMaps[project.status].icon}
            {statusMaps[project.status].title}
          </Badge>
        </>
      )}
    </>
  );
};

const ProjectIndividualPage = ({
  projectId,
  project,
}: {
  projectId: string;
  project: RouterOutputs["project"]["get"];
}) => {
  return (
    <div className="mt-3 grid grid-cols-2 gap-6">
      <div className="flex flex-grow flex-col gap-3">
        <span className="font-semibold">Activities</span>
        <div className="w-full rounded-md border grow flex flex-col">
          <ActivitiesTable
            activityData={project?.activities ?? []}
            pageData={{ type: "Project", id: projectId }}
          />
        </div>
      </div>
      <div className="flex flex-col gap-6">
        <div className="flex flex-grow flex-col gap-3">
          <span className="font-semibold">Contacts</span>
          <div className="w-full overflow-hidden rounded-md border">
            <ContactsTable
              pageData={{ type: "Project", id: projectId }}
              contactData={project?.contacts ?? []}
            />
          </div>
        </div>
        <div className="flex flex-grow flex-col gap-3">
          <span className="font-semibold">Companies</span>
          <div className="w-full overflow-hidden rounded-md border">
            <CompanyTable
              pageData={{ type: "Project", id: projectId }}
              companyData={project?.companies ?? []}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export const getStaticProps: GetStaticProps = (context) => {
  const id = context.params?.id;

  if (typeof id != "string") throw new Error("no id provided");

  return {
    props: {
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ProjectPage;
